#include <msp430.h>
volatile long int sysMillis = 0;

void setupPins()
{
    // Pot input

    P8DIR |= BIT8;
    P8OUT |= BIT8;
    P6SEL |= BIT5;

    //led 1 on p1.0
    //out
    P1DIR |= BIT1;
    //off
    P1OUT &= ~BIT1;

    //led 3 on 1.2
    //out
    P1DIR |= BIT2;
    //off
    P1OUT &= ~BIT2;
}

void setupTimers()
{
    TA2CCR0 = 500 - 1;
    // Разрешаем прерывание таймера по достижению значения TA1CCR0
    TA2CCTL0 = CCIE;
    // Настройка режима работы таймера Timer_A
    TA2CTL = TASSEL__SMCLK | ID_1 | MC_1 | TACLR;
    _enable_interrupt();
}

void setupADC()
{
    // Turn on ADC and enable multiple conversions
    ADC12CTL0 = ADC12SHT0_2 | ADC12ON | ADC12MSC | ADC12REFON;
    // Sampling timer, single sequence
    ADC12CTL1 |= ADC12SHP | ADC12CONSEQ_1;
    //ADC12CTL1 |= ADC12SSEL0 | ADC12SSEL1;   //adc clock select (SMCLK)
    ADC12CTL2 &= ~ADC12SR;  //set sample rate buffer to 200ksps
    // 12-bit conversion
    ADC12CTL2 |= ADC12RES_2;

    // Enable ADC interrupt on MEM1
    ADC12IE |= ADC12IE1;
    // A5 select POTECTIOMETER, //Vref=1.2V


    //0
    // x 400
    //1 2500 3800
    // 2
    ADC12MCTL1 |= ADC12INCH_5 | SELREF_2;
    // A10 - termal
    ADC12MCTL0 |= ADC12INCH_10 | SELREF_2;
    //ADC12MCTL1 |= ADC12EOS;
}

#pragma vector=ADC12_VECTOR
__interrupt void adc_interrupt()
{

    int val_TERM = ADC12MEM0;
    int val_potent = ADC12MEM1;

    if (val_TERM > val_potent)
    {
        P1OUT |= BIT1;
        P1OUT &= ~BIT2;
    }
    else
    {
        P1OUT &= ~BIT1;
        P1OUT |= BIT2;
    }

    ADC12IFG &= ~ADC12IFG1; // reset interrupt flag
}

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;
    setupPins();
    setupTimers();
    setupADC();
    while (1)
    {
        ADC12CTL0 |= ADC12ENC | ADC12SC; // Sampling and conversion start
        __bis_SR_register(LPM0_bits + GIE); // LPM0, ADC12_ISR will force exit
    }

}
